import { Bitmap } from "./Bitmap";
import { Text } from "./Text";
import { Container } from "./Container";
import { DisplayObject } from "./DisplayObject";
import { Graphics } from "./Graphics";
import { EventName, type Color } from "./type";
import { EventManager } from "./utils/EventManager";
import { Matrix } from "./utils/Matrix";
import { ShaderManager } from "./utils/ShaderManager";
import { TextureManager } from "./utils/TextureManager";
declare class TinyUI {
    static EventName: typeof EventName;
    EventName: typeof EventName;
    canvas: HTMLCanvasElement;
    gl: WebGLRenderingContext;
    contextOptions: WebGLContextAttributes;
    shaderManager: ShaderManager;
    textureManager: TextureManager;
    eventManager: EventManager;
    private shaderProgram;
    private positionLocation;
    private texCoordLocation;
    private colorLocation;
    private matrixLocation;
    private resolutionLocation;
    _imageLocation: WebGLUniformLocation | null;
    _useTextureLocation: WebGLUniformLocation | null;
    private positionBuffer;
    private texCoordBuffer;
    private colorBuffer;
    private indexBuffer;
    private viewportWidth;
    private viewportHeight;
    private currentMatrix;
    root: Container;
    private prevGlState;
    constructor(canvas: HTMLCanvasElement, options?: WebGLContextAttributes);
    private updateViewport;
    get stageWidth(): number;
    get stageHeight(): number;
    private initShaders;
    private initBuffers;
    render(patch?: boolean): void;
    private stashGlState;
    private restoreGlState;
    patchRender(): void;
    _renderTree(node: DisplayObject, parentMatrix?: Matrix, parentAlpha?: number): void;
    _setBufferData(positions: number[], texCoords: number[], colors: number[], indices: number[]): void;
    parseColor(color: string | number): Color;
    loadTexture(url: string): Promise<WebGLTexture>;
    destroy(): void;
    createBitmapFromUrl(url: string): Promise<Bitmap>;
    createBitmapFromImage(image: HTMLImageElement): Bitmap;
    createBitmapFromCanvas(canvas: HTMLCanvasElement, resize?: boolean): Bitmap;
    createText(textContent: string, name?: string): Text;
    createContainer(name?: string): Container;
    createGraphics(name?: string): Graphics;
    testRender(x: number, y: number, width: number, height: number): void;
}
export = TinyUI;
